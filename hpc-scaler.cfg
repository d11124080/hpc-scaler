[General]

;; basedir should point to the root of the hpc-scaler Application, i.e the directory
;; containing the ClusterInterface and NodeController

basedir = .
cluster_name = Sonic
logfile = /home/ronan/test.log

has_hardware = True
has_cloud = False

;; Number of seconds between checks
check_interval = 1

;; Strategy to use when deciding to power up nodes
;; longestqueued | bestfit
;; longestqueued = Power on enough nodes to satisfy the job which has been in the queue longest.
;; bestfit = Power on as many nodes as required to satisfy as much of the queue as possible
strategy = longestqueued

;; Spare nodes can be allowed if desired, to save newly queued jobs having to wait
; for the next check interval + boot time.
spare_hardware = 1
spare_cloud = 0

;; Node preference can be "Hardware" or "Cloud". Determines which node type should be preferred
; when choosing to boot a new node
node_preference = Hardware

;; Maximum number of cloud nodes which should ever be running - useful for cost control!
max_cloud_nodes = 1




[ClusterInterface]

;; ClusterInterface Section defines the parameters used by the ClusterInterface component
;; At a minimum, it should specify the hostname, driver_path, and cluster_driver.


;; "hostname" parameter should be used to specify the host (and port, if non-default)
;; of the cluster host which is running the resource manager, typically a "head node".
;; It can be a hostname of a machine on the local network, a fully-qualified domain name,
;; or can include a port using colon specification.
;; examples: headnode	clusterhead.example.org   headnode.cluster:42559
; hostname = localhost

hostname = localhost

;; "driver_path" specifies the case-sensitive directory in which the vendor-specific
;; drivers for the ClusterInterface are stored, relative to the root of the
;; ClusterInterface. Usually, this will be "Drivers". It should include a trailing
;; slash

driver_path = Drivers

;; "cluster_driver" specifies the type of resource manager this ClusterInterface
;; will be connecting to. It must correspond to a folder of the same name containing
;; the driver package for this resource type within the driver_path specified above.
;; This driver package must in turn contain a driver module named %cluster_driver%Driver.py

cluster_driver = Torque

[NodeController]

driver_path = Drivers
physical_driver = Ipmi
cloud_driver = Ec2

[Ipmi]

ipmitool_binary = /usr/bin/ipmitool
ipmitool_iface = lanplus
ipmi_username = root
ipmi_password = asdf1234

[Ec2]
aws_access_key_id = <censored>
aws_secret_access_key = <censored>
aws_security_group = default
aws_region = eu-west-1
aws_ssh_key = hpc-scaler-ec2
aws_ami = ami-35b1aa41
aws_type = t1.micro








