[General]

;; basedir should point to the root of the hpc-scaler Application, i.e the directory
;; containing the ClusterInterface and NodeController

basedir = .

;; cluster_name is a common name by which to identify the cluster
cluster_name = Sonic

;; Logfile to which the application will log messages
logfile = /home/ronan/test.log

;; specify whether the cluster contains hardware and/or cloud-based worker nodes
has_hardware = True
has_cloud = True

;; Number of seconds between checks. This should not be set too short except for debugging
;; purposes.
check_interval = 30

;; Strategy to use when deciding to power up nodes
;; longestqueued | bestfit
;; longestqueued = Power on enough nodes to satisfy the job which has been in the queue longest.
;; bestfit = Power on as many nodes as required to satisfy as much of the queue as possible
strategy = bestfit

;; Spare nodes can be allowed if desired, to save newly queued jobs having to wait
; for the next check interval + boot time.
spare_hardware = 0
spare_cloud = 0

;; Node preference can be "Hardware" or "Cloud". Determines which node type should be preferred
; when choosing to boot a new node
node_preference = Hardware


[ClusterInterface]

;; ClusterInterface Section defines the parameters used by the ClusterInterface component
;; At a minimum, it should specify the hostname, driver_path, and cluster_driver.


;; "hostname" parameter should be used to specify the host (and port, if non-default)
;; of the cluster host which is running the resource manager, typically a "head node".
;; It can be a hostname of a machine on the local network, a fully-qualified domain name,
;; or can include a port using colon specification.
;; examples: headnode	clusterhead.example.org   headnode.cluster:42559
; hostname = localhost

hostname = localhost

;; "driver_path" specifies the case-sensitive directory in which the vendor-specific
;; drivers for the ClusterInterface are stored, relative to the root of the
;; ClusterInterface. Usually, this will be "Drivers". It should include a trailing
;; slash

driver_path = Drivers

;; "cluster_driver" specifies the type of resource manager this ClusterInterface
;; will be connecting to. It must correspond to a folder of the same name containing
;; the driver package for this resource type within the driver_path specified above.
;; This driver package must in turn contain a driver module named %cluster_driver%Driver.py

cluster_driver = Torque

[NodeController]

;; Driver path should be the path relative to the NodeController base directory.
;; Unless you specifically moved it, you shouldn't need to change this value
driver_path = Drivers

;; Hardware driver specified the driver for communicating with server power
;; management interfaces, and must refer to a module named <hardware_driver>Driver.py
hardware_driver = Ipmi

;; Cloud driver specified the driver for communicating with public or private
;; cloud APIs, and must refer to a module named <cloud_driver>Driver.py
cloud_driver = Ec2

[Ipmi]
;; Settings specific to the Ipmi driver for the NodeController

;; Path to ipmitool binary on this system
ipmitool_binary = /usr/bin/ipmitool

;;Ipmi interface to use. For communications with Ipmi interfaces via a network,
;; this value should be "lan" or "lanplus"
ipmitool_iface = lanplus

;; Username of the IPMI interface management user
ipmi_username = root

;; Password of the IPMI interface management user
ipmi_password = asdf1234

;;A domain suffix will be added to worker node hostnames to enable IPMI
;;interface resolution
ipmi_dns_suffix = ipmi

[Ec2]
;;Settings specific to the Amazon EC2 Driver for the NodeController

;;Ec2 API credentials, required to make a connection to the API
;; These credentials must be kept securely.
aws_access_key_id = <censored>
aws_secret_access_key = <censored>

;;Security group in which to spin up ec2 instances. Determines the
;;range of ports which are permitted through the firewall.
aws_security_group = default

;; AWS Region to connect to
aws_region = eu-west-1

;; Public/Private key to be assigned to instances (must exist within EC2 account)
aws_ssh_key = hpc-scaler-ec2

;; The identifier of the ami type which represents the ec2 instance we want to launch
aws_ami = ami-e7b6b393

;; The size of the instance we typically want to create
aws_type = t1.micro

;;number of seconds to pause after an interaction with the EC2 API, to allow
;;for delayed replies
aws_api_delay = 3

;; Maximum number of cloud nodes which should ever be running - vitalfor cost control!
max_cloud_nodes = 1










